// Mocks generated by Mockito 5.4.0 from annotations
// in flutter_todaily/test/data/repository/calendar_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_todaily/data/data_source/local/dao/calendars_dao.dart'
    as _i2;
import 'package:flutter_todaily/data/data_source/local/database/local_database.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CalendarsDaoType].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarsDaoType extends _i1.Mock implements _i2.CalendarsDaoType {
  @override
  _i3.Future<int> insertCalendar(_i4.CalendarsCompanion? calendar) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertCalendar,
          [calendar],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<int> deleteCalendar(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCalendar,
          [id],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<int> updateCalendar(_i4.CalendarsCompanion? newCalendar) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCalendar,
          [newCalendar],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<List<_i4.Calendar>> selectCalendarListInYear(int? year) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectCalendarListInYear,
          [year],
        ),
        returnValue: _i3.Future<List<_i4.Calendar>>.value(<_i4.Calendar>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Calendar>>.value(<_i4.Calendar>[]),
      ) as _i3.Future<List<_i4.Calendar>>);
  @override
  _i3.Future<List<_i4.Calendar>> selectCalendarListInMonth(
    int? year,
    int? month,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectCalendarListInMonth,
          [
            year,
            month,
          ],
        ),
        returnValue: _i3.Future<List<_i4.Calendar>>.value(<_i4.Calendar>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Calendar>>.value(<_i4.Calendar>[]),
      ) as _i3.Future<List<_i4.Calendar>>);
  @override
  _i3.Future<_i4.Calendar?> selectCalendarOfDate(DateTime? otherDate) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectCalendarOfDate,
          [otherDate],
        ),
        returnValue: _i3.Future<_i4.Calendar?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Calendar?>.value(),
      ) as _i3.Future<_i4.Calendar?>);
  @override
  _i3.Future<_i4.Calendar?> selectCalendarWithId(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectCalendarWithId,
          [id],
        ),
        returnValue: _i3.Future<_i4.Calendar?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Calendar?>.value(),
      ) as _i3.Future<_i4.Calendar?>);
  @override
  _i3.Future<int> deleteCalendarAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteCalendarAll,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}
